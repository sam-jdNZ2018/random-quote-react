{"version":3,"sources":["script.js","serviceWorker.js","index.js"],"names":["QUOTES","COLORS","QuoteMachine","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getNewQuote","bind","assertThisInitialized","replaceCurrQuote","getRandomColor","quote","currColor","Math","floor","random","length","document","body","style","backgroundColor","state","qtext","qauth","color","currQuote","quotes","i","newQuote","setState","colorString","twink","tulink","react_default","a","createElement","id","className","href","target","type","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","script","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d01948c.chunk.js","sourcesContent":["import React from 'react';\n\nconst QUOTES = [\n  [\n    \"If you don't like the road you're walking, start paving another one.\",\n    \"Dolly Parton\"\n  ],\n  [\n    \"The most beautiful things in the world cannot be seen or even touched. They must be felt with the heart.\",\n    \"Helen Keller\"\n  ],\n  [\"Life is a series of baby steps.\", \"Hoda Kotb\"],\n  [\"Love yourself first and everything else falls into line.\", \"Lucille Ball\"],\n  [\"Lead from the heart, not the head.\", \"Princess Diana\"],\n  [\"Those who don't believe in magic will never find it.\", \"Roald Dahl\"],\n  [\n    \"I've failed over and over and over again in my life and that is why I succeed.\",\n    \"Michael Jordan\"\n  ],\n  [\"Nothing can dim the light that shines from within.\", \"Maya Angelou\"],\n  [\n    \"Sometimes you will never know the value of a moment until it becomes a memory.\",\n    \"Dr. Seuss\"\n  ],\n  [\n    \"You can't go back and change the beginning, but you can start where you are and change the ending.\",\n    \"C.S. Lewis\"\n  ]\n];\n\nconst COLORS =[\"rgb(255, 51, 0)\", \"rgb(255, 153, 0)\",\"rgb(153, 102, 51)\",\"rgb(179, 0, 89)\", \"rgb(230, 184, 0)\", \"rgb(204, 204, 0)\", \"rgb(153, 204, 0)\", \"rgb(255, 102, 102)\", \"rgb(0, 51, 102)\", \"rgb(51, 51, 255)\", \"rgb(102, 153, 153)\", \"rgb(51, 153, 102)\", \"rgb(153, 153, 255)\", \"rgb(153, 0, 204)\", \"rgb(0, 51, 0)\"];\n\nclass QuoteMachine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getNewQuote = this.getNewQuote.bind(this);\n    this.replaceCurrQuote = this.replaceCurrQuote.bind(this);\n    this.getRandomColor = this.getRandomColor.bind(this);\n    let quote = this.getNewQuote(\"\", QUOTES);\n    let currColor = COLORS[Math.floor(Math.random() * COLORS.length)];\n    document.body.style.backgroundColor = currColor;\n    this.state = { qtext: quote[0], qauth: quote[1], color: currColor};\n  }\n\n  //Get a new quote pairing to display, ensuring that it is not the same as the current quote\n  getNewQuote(currQuote, quotes) {\n    let i = Math.floor(Math.random() * quotes.length);\n    while (quotes[i][0] == currQuote) {\n      i = Math.floor(Math.random() * quotes.length);\n    }\n    return quotes[i];\n  }\n\n  //Replace the currently displayed quote text and quote author with a randomly chosen new quote from\n  //the QUOTES array const\n  replaceCurrQuote() {\n  /*  let newQuote = this.getNewQuote(this.state.qtext, QUOTES);\n    this.setState({ qtext: newQuote[0], qauth: newQuote[1],  color: this.state.color});*/\n     let newQuote = this.getNewQuote(this.state.qtext, QUOTES);\n    let currColor = this.getRandomColor();\n    this.setState({ qtext: newQuote[0], qauth: newQuote[1],  color: currColor});\n  }\n\n  //Get a random color and return said color in an object ready for use as a style object for various HTML elements\n  getRandomColor(){    \n   /* let hue = Math.floor(Math.random() * 360);\n    let sat = Math.floor(Math.random() * 50) + 50;\n    let lig = 50;\n    let colorString = \"hsl(\" + hue + \",\" + sat + \"%,\" + lig + \"%)\";\n    document.body.style.backgroundColor = colorString;\n    return {backgroundColor: colorString};*/\n    let colorString = COLORS[Math.floor(Math.random() * COLORS.length)];\n    while(this.state.color == colorString){\n      colorString = COLORS[Math.floor(Math.random() * COLORS.length)];\n    }\n    document.body.style.backgroundColor = colorString;\n    return colorString; \n  }\n  \n  render() {\n    let twink = \"https://twitter.com/intent/tweet?text=\" + this.state.qtext + \".  -- \" + this.state.qauth;\n    let tulink = \"https://www.tumblr.com/widgets/share/tool?posttype=quote&title=DailyQuote&content=\" + this.state.qtext + \"&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button\";\n    let color = {backgroundColor: this.state.color};\n    return (\n      <div id=\"quote-outer\">\n        <h1 id=\"title\">The Quote Machine</h1>\n      <div id=\"quote-box\">\n        <div id=\"quote-cont\">\n          <div id=\"quote-details\">\n            <p id=\"text\">\n              <i className=\"fas fa-quote-left\" /> {this.state.qtext}\n            </p>\n            <p id=\"author\">{this.state.qauth}</p>\n          </div>\n          <div id=\"button-cont\">\n            <div id=\"social-cont\">\n              <a className=\"btn btn-default\" id=\"tweet-quote\" style={color} href={twink} target=\"_blank\" type=\"button\">\n                <i className=\"fab fa-twitter\" />\n              </a>\n              <a className=\"btn btn-default\" id=\"tumble-quote\" style={color} href={tulink} target=\"_blank\" type=\"button\">\n                <i className=\"fab fa-tumblr\" />\n              </a>\n            </div>\n            <button className=\"btn btn-default\" id=\"new-quote\" type=\"button\" style={color} onClick={this.replaceCurrQuote}>Get New Quote</button>\n          </div>\n        </div>\n      </div>\n        </div>\n    );\n  }\n}\n\nexport default QuoteMachine;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport QuoteMachine from './script';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<QuoteMachine />, document.getElementById('main'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}